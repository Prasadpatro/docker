---kuberenetes is an open source orchestration engine for managing the containers
---it is a replacement of docker swarm
---container deployment,scaling and descaling of container



Advantages	

==automated scheduling(automatically launch container on nodes based on their resource requirements)
==self healing capability(it allows to replce when nodes die. it wont ask user to solve it)
==we can rollout our changes withot changing its state
==scaling and load balancing
==it will create their own ip 
==storage orchastration




Statefulset are like deplpoyments , but provides guarantees about the ordering and uniquness of pods.
statefulset maintains a unique identity for each pod which makes it interchangable.
statefulset is valuable when   ----pod have unique network identifier
                               ----stable persistence storage 
							   ----ordering deployments and scaling
							   ----ordered automated rolling updates
							 
Deamonset is nothing but a running a copy of a pod 


Cordon---making the node unavilble
   it will not allow to run a new pod in the particular node
   but the existing pods are still in that node.
   
   kubectl cordon nodename 
   


Drain ---resheduling the pod in particular node ( sending the pods to another node before making this node is empty.)

    kubectl drain nodename 
	
	if you drain a node , the pods in the node will automatically assigned to another nodes which have the deployment otherwise the pods killed
	
Taint and tolerations

  Taints are sheduled on nodes and tolerations are sheduled on pods
  
  when a taint is set as blue then the pod which tolerations are blue can only sheduled on that particular node .
  
  kubectl taint nodes <node name> <taint key>:<taint effect>-
  
  
  tolerations:
- key: "<taint key>"
  operator: "Equal"
  value: "<taint value>"
  effect: "<taint effect>"



---------K8's on centos------------

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

sudo yum install -y kubelet kubeadm kubectl

systemctl enable kubelet

systemctl start kubelet

------sudo vi /etc/hosts

With the entry:

192.168.1.10 master.phoenixnap.com master-node
192.168.1.20 node1. phoenixnap.com node1 worker-node

sudo firewall-cmd --permanent --add-port=6443/tcp
sudo firewall-cmd --permanent --add-port=2379-2380/tcp
sudo firewall-cmd --permanent --add-port=10250/tcp
sudo firewall-cmd --permanent --add-port=10251/tcp
sudo firewall-cmd --permanent --add-port=10252/tcp
sudo firewall-cmd --permanent --add-port=10255/tcp
sudo firewall-cmd --reload

sudo firewall-cmd --permanent --add-port=10251/tcp
sudo firewall-cmd --permanent --add-port=10255/tcp
firewall-cmd --reload

cat EOF /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

sudo setenforce 0
sudo sed -i ‘s/^SELINUX=enforcing$/SELINUX=permissive/’ /etc/selinux/config

sudo sed -i '/swap/d' /etc/fstab
sudo swapoff -a


-----creating a cluster on centos

kubeadm init  --apiserver-advertise-address=192.168.59.108 --pod-network-cidr=10.244.0.0/16

kuberenetescan be used in 3 ways
1)using minikube
2)using kuberenetes in public cloud
3)building kuberenetes cluster


master

etcd---its a database which stores the key value store that keeps current cluset state, only accessble to the master node, backup also
kube apiserver---front end of the cluster that services REST operations(kubectl,dashboard) and connect to the etcd database
kube scheduler---schedules pods on specific nodes based on labels , taints, and tolerations set for the pods.
kube controller manager---manage current state of cluster.
cloud control manager---interact with outside cloud managers

worker-node

kubelet---passes requests to the container engine to ensure taht pods are availble
kube-proxy---runes on every node and uses iptables to provide an interface to connect kuberenetes components



creating pods with yaml file

kubectl create -f name.yaml





KUBECTL CONTEXT AND CONFIGURATION

kubectl config view                                                            # Show Merged kubeconfig settings.
KUBECONFIG=~/.kube/config:~/.kube/kubconfig2                                   # use multiple kubeconfig files at the same time and view merged config
kubectl config view -o jsonpath='{.users[?(@.name == "e2e")].user.password}'   # get the password for the e2e user
kubectl config view -o jsonpath='{.users[].name}'                              # display the first user
kubectl config view -o jsonpath='{.users[*].name}'                             # get a list of users
kubectl config get-contexts                                                    # display list of contexts
kubectl config current-context                                                 # display the current-context
kubectl config use-context my-cluster-name                                     # set the default context to my-cluster-name
kubectl config set-cluster my-cluster-name                                     # set a cluster entry in the kubeconfig
kubectl config set-cluster my-cluster-name --proxy-url=my-proxy-url            # configure the URL to a proxy server to use for requests made by this client in the kubeconfig
kubectl config set-credentials kubeuser/foo.kubernetes.com \
  --username=kubeuser --password=kubepassword                                  # add a new user to your kubeconf that supports basic auth
kubectl config set-context --current --namespace=ggckad-s2                     # permanently save the namespace for all subsequent kubectl commands in that context
kubectl config set-context gce --user=cluster-admin --namespace=foo \          
  && kubectl config use-context gce                                            # set a context utilizing a specific username and namespace
kubectl config unset users.foo                                                 # delete user foo

# short alias to set/show context/namespace (only works for bash and bash-compatible shells, current context to be set before using kn to set namespace) 
alias kx='f() { [ "$1" ] && kubectl config use-context $1 || kubectl config current-context ; } ; f'
alias kn='f() { [ "$1" ] && kubectl config set-context --current --namespace $1 || kubectl config view --minify | grep namespace | cut -d" " -f6 ; } ; f'

CREATING OBJECTS

kubectl apply -f ./my-manifest.yaml            						    	# create resource(s)
kubectl apply -f ./my1.yaml -f ./my2.yaml                                   # create from multiple files
kubectl apply -f ./dir                         								# create resource(s) in all manifest files in dir
kubectl apply -f https://git.io/vPieo          								# create resource(s) from url
kubectl create deployment nginx --image=nginx                               # start a single instance of nginx
kubectl create job hello --image=busybox:1.28 -- echo "Hello World"         # create a Job which prints "Hello World"
kubectl create cronjob hello --image=busybox:1.28  \
 --schedule="*/1 * * * *" -- echo "Hello World"                             # create a CronJob that prints "Hello World" every minute 
kubectl explain pods                                                        # get the documentation for pod manifests

 CREATE MULTIPLE YAML OBJECTS FROM STDIN

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: busybox-sleep
spec:
  containers:
  - name: busybox
    image: busybox:1.28
    args:
    - sleep
    - "1000000"
---
apiVersion: v1
kind: Pod
metadata:
  name: busybox-sleep-less
spec:
  containers:
  - name: busybox
    image: busybox:1.28
    args:
    - sleep
    - "1000"
EOF

CREATE A SECRET WITH SEVERAL KEYS

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  password: $(echo -n "s33msi4" | base64 -w0)
  username: $(echo -n "jane" | base64 -w0)
EOF


VIEWING AND FINDING RESOURCES

kubectl get services                                      # List all services in the namespace
kubectl get pods --all-namespaces                         # List all pods in all namespaces
kubectl get pods -o wide                                  # List all pods in the current namespace, with more details
kubectl get deployment my-dep                             # List a particular deployment
kubectl get pods                                          # List all pods in the namespace
kubectl get pod my-pod -o yaml                            # Get a pod's YAML
kubectl describe nodes my-node                            # Describe commands with verbose output
kubectl describe pods my-pod
kubectl get services --sort-by=.metadata.name             # List Services Sorted by Name
kubectl get pods --sort-by= \
 '.status.containerStatuses[0].restartCount'              # List pods Sorted by Restart Count
kubectl get pv --sort-by=.spec.capacity.storage           # List PersistentVolumes sorted by capacity
kubectl get pods --selector=app=cassandra -o \
  jsonpath='{.items[*].metadata.labels.version}'          # Get the version label of all pods with label app=cassandra
kubectl get configmap myconfig \
  -o jsonpath='{.data.ca\.crt}'                           # Retrieve the value of a key with dots, e.g. 'ca.crt'
kubectl get secret my-secret --template=
  \'{{index .data "key-name-with-dashes"}}'               # Retrieve a base64 encoded value with dashes instead of underscores
kubectl get node --selector=
  \'!node-role.kubernetes.io/control-plane'               # Get all worker nodes
kubectl get pods --field-selector=status.phase=Running    # Get all running pods in the namespace
kubectl get nodes -o jsonpath= '{.items[*].status \
   .addresses[?(@.type=="ExternalIP")].address}'          # Get ExternalIPs of all nodes

 LIST NAMES OF PODS THAT BELONG TO PARTICULAR RC
# "jq" command useful for transformations that are too complex for jsonpath, it can be found at https://stedolan.github.io/jq/
sel=${$(kubectl get rc my-rc --output=json | jq -j '.spec.selector | to_entries | .[] | "\(.key)=\(.value),"')%?}
echo $(kubectl get pods --selector=$sel --output=jsonpath={.items..metadata.name})
kubectl get pods --show-labels                            # Show labels for all pods 
JSONPATH='{range .items[*]}{@.metadata.name}:\
{range @.status.conditions[*]}{@.type}= \
{@.status};{end}{end}' \
 && kubectl get nodes -o \
 jsonpath="$JSONPATH" | grep "Ready=True"                 # Check which nodes are ready
kubectl get secret my-secret -o go-template=\
'{{range $k,$v := .data}}{{"### "}}{{$k}}{{"\n"}}\
{{$v|base64decode}}{{"\n\n"}}{{end}}'                     # Output decoded secrets without external tools
kubectl get pods -o json | jq '.items[].spec.containers\
[].env[]?.valueFrom.secretKeyRef.name' | grep -v \
null | sort | uniq                                        # List all Secrets currently in use by a pod

# List all containerIDs of initContainer of all pods
# Helpful when cleaning up stopped containers, while avoiding removal of initContainers.
kubectl get pods --all-namespaces -o jsonpath='{range .items[*].status.initContainerStatuses[*]}{.containerID}{"\n"}{end}' | cut -d/ -f3

kubectl get events --sort-by=.metadata.creationTimestamp  # List Events sorted by timestamp
kubectl events --types=Warning                            # List all warning events
kubectl diff -f ./my-manifest.yaml                        # Compares the current state of the cluster against the state that the cluster would be in if the manifest was applied
kubectl get nodes -o json | jq -c 'paths|join(".")'       # Produce a period-delimited tree of all keys returned for nodes
kubectl get pods -o json | jq -c 'paths|join(".")'        # Produce a period-delimited tree of all keys returned for pods, etc

# Produce ENV for all pods, assuming you have a default container for the pods, default namespace and the `env` command is supported.
# Helpful when running any supported command across all pods, not just `env`
for pod in $(kubectl get po --output=jsonpath={.items..metadata.name}); do echo $pod && kubectl exec -it $pod -- env; done

kubectl get deployment nginx-deployment --subresource=status  # Get a deployment's status subresource


UPDATING RESOURCES


kubectl set image deployment/frontend www=image:v2               # Rolling update "www" containers of "frontend" deployment, updating the image
kubectl rollout history deployment/frontend                      # Check the history of deployments including the revision
kubectl rollout undo deployment/frontend                         # Rollback to the previous deployment
kubectl rollout undo deployment/frontend --to-revision=2         # Rollback to a specific revision
kubectl rollout status -w deployment/frontend                    # Watch rolling update status of "frontend" deployment until completion
kubectl rollout restart deployment/frontend                      # Rolling restart of the "frontend" deployment
cat pod.json | kubectl replace -f -                              # Replace a pod based on the JSON passed into stdin
kubectl replace --force -f ./pod.json                            # Force replace, delete and then re-create the resource. Will cause a service outage.
kubectl expose rc nginx --port=80 --target-port=8000             # Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000
kubectl get pod mypod -o yaml | sed 's/\(image: myimage\) \
:.*$/\1:v4/' | kubectl replace -f -                              # Update a single-container pod's image version (tag) to v4
kubectl label pods my-pod new-label=awesome                      # Add a Label
kubectl label pods my-pod new-label-                             # Remove a label
kubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       # Add an annotation
kubectl autoscale deployment foo --min=2 --max=10                # Auto scale a deployment "foo"

PATCHING RESOURCES

kubectl patch node k8s-node-1 -p '{"spec":{"unschedulable":true}}'        # Partially update a node

kubectl patch pod valid-pod -p '{"spec":{"containers":[{"name":" \ 
   kubernetes-serve-hostname","image":"new image"}]}}'                    # Update a container's image; spec.containers[*].name is required because it's a merge key
   
kubectl patch pod valid-pod --type='json' -p='[{"op": "replace", \ 
   "path": "/spec/containers/0/image", "value":"new image"}]'             # Update a container's image using a json patch with positional arrays
   
kubectl patch deployment valid-deployment  --type json   -p= \ 
'[{"op": "remove", "path": "/spec/template/spec/containers/0/livenessProbe"}]'  # Disable a deployment livenessProbe using a json patch with positional arrays

kubectl patch sa default --type='json' -p='[{"op": "add", "path": \ 
 "/secrets/1", "value": {"name": "whatever" } }]'                         # Add a new element to a positional array
 
kubectl patch deployment nginx-deployment --subresource= \ 
'scale' --type='merge' -p '{"spec":{"replicas":2}}'                       # Update a deployment's replica count by patching its scale subresource




DELETING RESOURCES

kubectl delete -f ./pod.json                                      # Delete a pod using the type and name specified in pod.json
kubectl delete pod unwanted --now                                 # Delete a pod with no grace period
kubectl delete pod,service baz foo                                # Delete pods and services with same names "baz" and "foo"
kubectl delete pods,services -l name=myLabel                      # Delete pods and services with label name=myLabel
kubectl -n my-ns delete pod,svc --all                             # Delete all pods and services in namespace my-ns,
kubectl get pods  -n mynamespace --no-headers=true | \ 
awk '/pattern1|pattern2/{print $1}' | xargs  kubectl  \ 
delete -n mynamespace pod                                         # Delete all pods matching the awk pattern1 or pattern2

INTERACTING WITH RUNNING PODS

kubectl logs my-pod                                        # dump pod logs (stdout)
kubectl logs -l name=myLabel                               # dump pod logs, with label name=myLabel (stdout)
kubectl logs my-pod --previous                             # dump pod logs (stdout) for a previous instantiation of a container
kubectl logs my-pod -c my-container                        # dump pod container logs (stdout, multi-container case)
kubectl logs -l name=myLabel -c my-container               # dump pod logs, with label name=myLabel (stdout)
kubectl logs my-pod -c my-container --previous             # dump pod container logs (stdout, multi-container case) for a previous instantiation of a container
kubectl logs -f my-pod                                     # stream pod logs (stdout)
kubectl logs -f my-pod -c my-container                     # stream pod container logs (stdout, multi-container case)
kubectl logs -f -l name=myLabel --all-containers           # stream all pods logs with label name=myLabel (stdout)
kubectl run -i --tty busybox --image=busybox:1.28 -- sh    # Run pod as interactive shell
kubectl run nginx --image=nginx -n mynamespace             # Start a single instance of nginx pod in the namespace of mynamespace
kubectl run nginx --image=nginx \ 
  --dry-run=client -o yaml > pod.yaml                      # Generate spec for running pod nginx and write it into a file called pod.yaml
kubectl attach my-pod -i                                   # Attach to Running Container
kubectl port-forward my-pod 5000:6000                      # Listen on port 5000 on the local machine and forward to port 6000 on my-pod
kubectl exec my-pod -- ls /                        		   # Run command in existing pod (1 container case)
kubectl exec --stdin --tty my-pod -- /bin/sh       		   # Interactive shell access to a running pod (1 container case)
kubectl exec my-pod -c my-container -- ls /        		   # Run command in existing pod (multi-container case)
kubectl top pod POD_NAME --containers             		   # Show metrics for a given pod and its containers
kubectl top pod POD_NAME --sort-by=cpu            		   # Show metrics for a given pod and sort it by 'cpu' or 'memory'


COPYING FILES AND DIRECTORIES TO AND FROM CONTAINERS 

kubectl cp /tmp/foo_dir my-pod:/tmp/bar_dir                # Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the current namespace
kubectl cp /tmp/foo my-pod:/tmp/bar -c my-container        # Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container
kubectl cp /tmp/foo my-namespace/my-pod:/tmp/bar           # Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace my-namespace
kubectl cp my-namespace/my-pod:/tmp/foo /tmp/bar           # Copy /tmp/foo from a remote pod to /tmp/bar locally


INTERACTING WITH DEPLOYMENTS AND SERVICES

kubectl logs deploy/my-deployment                          # dump Pod logs for a Deployment (single-container case)
kubectl logs deploy/my-deployment -c my-container          # dump Pod logs for a Deployment (multi-container case)
kubectl port-forward svc/my-service 5000                   # listen on local port 5000 and forward to port 5000 on Service backend
kubectl port-forward svc/my-service 5000:my-service-port   # listen on local port 5000 and forward to Service target port with name <my-service-port>
kubectl port-forward deploy/my-deployment 5000:6000        # listen on local port 5000 and forward to port 6000 on a Pod created by <my-deployment>
kubectl exec deploy/my-deployment -- ls                    # run command in first Pod and first container in Deployment (single- or multi-container cases)

INTERACTING WITH NODES AND CLUSTER


kubectl cordon my-node                                                # Mark my-node as unschedulable
kubectl drain my-node                                                 # Drain my-node in preparation for maintenance
kubectl uncordon my-node                                              # Mark my-node as schedulable
kubectl top node my-node                                              # Show metrics for a given node
kubectl cluster-info                                                  # Display addresses of the master and services
kubectl cluster-info dump                                             # Dump current cluster state to stdout
kubectl cluster-info dump --output-directory=/path/to/cluster-state   # Dump current cluster state to /path/to/cluster-state
kubectl get nodes -o='custom-columns=NodeName:.metadata.name, \
  TaintKey:.spec.taints[*].key,TaintValue:.spec.taints[*].value,\     
  TaintEffect:.spec.taints[*].effect'                                 # View existing taints on which exist on current nodes
kubectl taint nodes foo dedicated=special-user:NoSchedule             # If a taint with that key and effect already exists, its value is replaced as specified

RESOURCE TYPES

kubectl api-resources

OTHER OPERATIONS FOR EXPLORING API RESOURCES:

kubectl api-resources --namespaced=true                             # All namespaced resources
kubectl api-resources --namespaced=false                            # All non-namespaced resources
kubectl api-resources -o name                                       # All resources with simple output (only the resource name)
kubectl api-resources -o wide                                       # All resources with expanded (aka "wide") output
kubectl api-resources --verbs=list,get                              # All resources that support the "list" and "get" request verbs
kubectl api-resources --api-group=extensions                        # All resources in the "extensions" API group




LABELS IN K8'S

 kubectl get deploy --show-labels
 kubectl label deploy myngnix state=demo
 kubectl get deploy --selector state=demo
 kubectl get all --selector app=myngnix
